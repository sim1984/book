<!DOCTYPE chapter>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="sequences" xml:lang="ru">
    <info>
        <title>Последовательности (генераторы)</title>
    </info>
    <indexterm>
        <primary>SEQUENCE</primary>
    </indexterm>
    <indexterm>
        <primary>GENERATOR</primary>
    </indexterm>

    <para>Последовательность (sequence) или генератор (generator) — объект базы данных,
        предназначенный для получения уникального числового значения. Термин последовательность
        является SQL совместимым. Ранее в Interbase и Firebird последовательности называли
        генераторами.</para>
    <para>Независимо от диалекта базы данных последовательности (или генераторы) всегда хранятся как
        64-битные целые значения. </para>
    <caution>
        <para>Если клиент использует 1 диалект, то сервер передаёт ему значения последовательности,
            усечённые до 32-битного значения. Если значение последовательности передаются в
            32-разрядное поле или переменную, то до тех пор, пока текущее значение
            последовательности не вышло за границы для 32-битного числа, ошибок не будет. В момент
            выхода значения последовательности за этот диапазон база данных 3-го диалекта выдаст
            сообщение об ошибке, а база данных 1-го диалекта будет молча обрезать значения (что
            также может привести к ошибке — например, если поле, заполняемое генератором, является
            первичным или уникальным). </para>
    </caution>
    <para>В главе "<link linkend="tables">Таблицы</link>" мы уже сталкивались с
        последовательностями. В этой главе поговорим подробнее о создании, модификации и удалении
        последовательностей.</para>

    <section>
        <title>Создание последовательности</title>

        <para>Для создания последовательности используется оператор CREATE SEQUENCE. Его синтаксис
            описан ниже:
            <programlisting>
CREATE {SEQUENCE | GENERATOR} <replaceable>seq_name</replaceable>
[START WITH <replaceable>value</replaceable>] [INCREMENT [BY] <replaceable>increment</replaceable>];
                </programlisting>
        </para>

        <para>Слова SEQUENCE и GENERATOR являются синонимами. Вы можете использовать любое из них,
            но рекомендуется использовать SEQUENCE.</para>

        <para>В момент создания последовательности ей устанавливается значение, указанное в
            необязательном предложении START WITH. Если предложение STARTING WITH отсутствует, то
            последовательности устанавливается значение равное 0. Давайте посмотрим примеры создания
            последовательностей:
            <programlisting language="sql">
-- начальное значение последовательности равно 0                
CREATE SEQUENCE SEQ_EMP_NO; 

-- начальное значение последовательности равно 5
CREATE SEQUENCE SEQ_COUNTRY START WITH 5; 
                </programlisting>
        </para>

        <para>Необязательное предложение INCREMENT [BY] позволяет задать шаг приращения для
            оператора NEXT VALUES FOR. По умолчанию шаг приращения равен единице. Приращение не
            может быть установлено в ноль для пользовательских последовательностей. Значение
            последовательности изменяется также при обращении к функции GEN_ID, где в качестве
            параметра указывается имя последовательности и значение приращения, которое может быть
            отлично от указанного в предложении INCREMENT BY. </para>

        <note>
            <para>Опция INCREMENT BY доступна начиная с Firebird 3.0.</para>
        </note>

        <para>В следующем примере создадим последовательность с начальным значением 5 и шагом
            приращения равным 10:
            <programlisting language="sql">
CREATE SEQUENCE EMP_NO_GEN START WITH 5 INCREMENT BY 10;      
                </programlisting>
        </para>
    </section>

    <section>
        <title>Модификация последовательности</title>

        <para>Оператор ALTER SEQUENCE устанавливает значение последовательности или генератора в
            заданное значение и/или изменяет значение приращения. Его синтаксис приведён ниже:
            <programlisting>
ALTER {SEQUENCE | GENERATOR} <replaceable>seq_name</replaceable> 
[RESTART [WITH <replaceable>new_val</replaceable>]] 
[INCREMENT [BY] <replaceable>increment</replaceable>];
                </programlisting>
        </para>

        <para>Предложение RESTART WITH позволяет установить значение последовательности. Предложение
            RESTART может быть использовано самостоятельно (без WITH) для перезапуска значения
            последовательности с того значения с которого был начат старт генерации значений или
            предыдущий рестарт.</para>
        <warning>
            <para>Неосторожное использование оператора ALTER SEQUENCE (изменение значения
                последовательности или генератора) может привести к нарушению логической целостности
                данных. </para>
        </warning>
        <para>Следующий оператор установит значение последовательности в 100:
            <programlisting language="sql">
ALTER SEQUENCE EMP_NO_GEN RESTART WITH 100;      
                </programlisting>
        </para>
        <para>Если необходимо сбросить значение последовательности в то, которое было установлено
            при создании последовательности (или при предыдущей установке значения), то выполним:
            <programlisting language="sql">
ALTER SEQUENCE EMP_NO_GEN RESTART;          
                </programlisting>
        </para>
        <para>Предложение INCREMENT [BY] позволяет изменить шаг приращения последовательности для
            оператора NEXT VALUES FOR. Эта возможность доступна начиная с Firebird 3.0.</para>
        <note>
            <para>Изменение значения приращения — это возможность, которая вступает в силу для
                каждого запроса, который запускается после фиксаций изменения. Процедуры, которые
                вызваны впервые после изменения приращения, будут использовать новое значение, если
                они будут содержать операторы NEXT VALUE FOR. Процедуры, которые уже работают, не
                будут затронуты, потому что они кэшируются. Процедуры, использующие NEXT VALUE FOR,
                не должны быть перекомпилированы, чтобы видеть новое приращение, но если они уже
                работают или загружены, то никакого эффекта не будет. Конечно процедуры,
                использующие gen_id(gen, expression), не затронут при изменении приращения. </para>
        </note>
        <para>Следующий запрос изменит приращение последовательности:
            <programlisting language="sql">
ALTER SEQUENCE EMP_NO_GEN INCREMENT BY 10;  
                </programlisting>
        </para>
        <para>Существует также устаревший оператор SET GENERATOR, который оставлен лишь для
            обеспечения обратной совместимости и не рекомендуется для использования. Он предназначен
            только для установки значения последовательности или генератора в заданное значение.
            Пример его применения показан ниже:
            <programlisting language="sql">
SET GENERATOR EMP_NO_GEN TO 145;
                </programlisting>
        </para>
    </section>

    <section>
        <title>Удаление последовательности</title>

        <para>Оператор DROP SEQUENCE удаляет существующую последовательность (генератор). Слова
            SEQUENCE и GENERATOR являются синонимами. Вы можете использовать любое из них, но
            рекомендуется использовать SEQUENCE. При наличии зависимостей для существующей
            последовательности (генератора) удаления не будет выполнено. Синтаксис данного оператора
            довольно простой:
            <programlisting>
DROP {SEQUENCE | GENERATOR} <replaceable>seq_name</replaceable>;
                </programlisting>
        </para>
    </section>

    <section>
        <title>Работа с последовательностью</title>

        <para>Для получения следующего значения последовательности используется оператор NEXT VALUE
            FOR. Его синтаксис представлен ниже:
            <programlisting>
NEXT VALUE FOR <replaceable>sequence-name</replaceable>
                </programlisting>
        </para>

        <para>Приведём пример использования данного оператора внутри триггера BEFORE INSERT:
            <programlisting language="sql"> 
NEW.CUST_ID = NEXT VALUE FOR CUSTSEQ;
                </programlisting>
        </para>

        <para>NEXT VALUE FOR не поддерживает значение приращения, отличное от того, что было указано
            при создании последовательности в предложении INCREMENT [BY]. Если требуется другое
            значение шага, то используйте старую функцию GEN_ID.</para>

        <para>Функция GEN_ID увеличивает значение генератора или последовательности и возвращает
            новое значение. Её синтаксис выглядит так:
            <programlisting>
GEN_ID(<replaceable>gen_name</replaceable>, <replaceable>increment</replaceable>) 
                        </programlisting>
        </para>

        <note>
            <para>Если значение параметра <replaceable>increment</replaceable> меньше нуля,
                произойдёт уменьшение значения генератора. Внимание! Следует быть крайне аккуратным
                при таких манипуляциях в базе данных, они могут привести к потере целостности
                данных. Если <replaceable>step</replaceable> равен 0, функция не будет ничего делать
                со значением генератора и вернёт его текущее значение. </para>
        </note>

        <para>В этом примере мы увеличим значение последовательности на 100.
            <programlisting language="sql"> 
SELECT GEN_ID(g1, 100) AS ID
FROM RDB$DATABASE
                </programlisting>
        </para>
    </section>
</chapter>
